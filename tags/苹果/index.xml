<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>苹果 on 超级浩码</title>
    <link>https://vastzh.com/tags/%E8%8B%B9%E6%9E%9C/</link>
    <description>Recent content in 苹果 on 超级浩码</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>© 2024 超级浩码</copyright>
    <lastBuildDate>Thu, 25 Jan 2024 15:38:15 +0800</lastBuildDate><atom:link href="https://vastzh.com/tags/%E8%8B%B9%E6%9E%9C/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>开发日记 —— 记录对接苹果登录的坑</title>
      <link>https://vastzh.com/blog/apple_login/</link>
      <pubDate>Thu, 25 Jan 2024 15:38:15 +0800</pubDate>
      
      <guid>https://vastzh.com/blog/apple_login/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;最近在开发新项目时用到了 苹果登录、微信登录和订阅支付，由于是第一次对接以上内容，踩了不少坑，记录一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;本文主要介绍苹果登录，我也会在之后的文章中介绍微信登录和订阅支付。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;前言&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h2 class=&#34;relative group&#34;&gt;前言 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%89%8d%e8%a8%80&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;之前我的APP中大多数是买断式的，用户可以使用一些基本的功能，如果需要高级功能，则需要付费买断。&lt;/p&gt;
&lt;p&gt;这次介于新的项目的特点，我决定在买断的基础之外加上订阅支付，对我来说算是一种新的尝试吧。有了订阅同时也就意味着需要构建一个用户体系来管理订阅。&lt;/p&gt;
&lt;p&gt;对于订阅支付来说&lt;strong&gt;用户体系&lt;/strong&gt;更符合逻辑。但在调研过程中也发现有些APP没有做登录(用户体系)也依然有订阅支付，其主要还是依靠大部分IAP组件提供的&lt;strong&gt;恢复购买&lt;/strong&gt;功能+&lt;strong&gt;本地验证&lt;/strong&gt;接口实现的。但是这里面还是有一些坑，在下文会介绍。&lt;/p&gt;
&lt;hr&gt;
&lt;div id=&#34;正文&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h2 class=&#34;relative group&#34;&gt;正文 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%ad%a3%e6%96%87&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;先看下完整的苹果登录流程：





  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/apple_login/image-3.png&#34;
        alt=&#34;Alt text&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;hr&gt;
&lt;div id=&#34;1-苹果开发者后台配置&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h3 class=&#34;relative group&#34;&gt;1. 苹果开发者后台配置 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#1-%e8%8b%b9%e6%9e%9c%e5%bc%80%e5%8f%91%e8%80%85%e5%90%8e%e5%8f%b0%e9%85%8d%e7%bd%ae&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;服务端需要的参数,可在苹果开发者后台设置。 设置App ID, 在 &lt;strong&gt;Capabilities&lt;/strong&gt; 中设置 &lt;strong&gt;Sign In with Apple&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;




  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/apple_login/a1.png&#34;
        alt=&#34;&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  







  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/apple_login/a2.png&#34;
        alt=&#34;&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;p&gt;创建一个用来在服务端与Apple服务器交互的Key，并下载密钥文件。





  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/apple_login/a3.png&#34;
        alt=&#34;&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  







  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/apple_login/a4.png&#34;
        alt=&#34;&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;hr&gt;
&lt;div id=&#34;2-客户端配置&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h3 class=&#34;relative group&#34;&gt;2. 客户端配置 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#2-%e5%ae%a2%e6%88%b7%e7%ab%af%e9%85%8d%e7%bd%ae&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;选择主流的Apple登录插件&lt;a href=&#34;https://pub.dev/packages/sign_in_with_apple&#34;   target=&#34;_blank&#34;&gt;
    Sign_in_with_apple&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;




  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/apple_login/image.png&#34;
        alt=&#34;&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dependencies:
  flutter:
    sdk: flutter
  sign_in_with_apple: ^latest_version
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在登录按钮里调用方法：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;final credential = await SignInWithApple.getAppleIDCredential(
                    scopes: [
                      AppleIDAuthorizationScopes.email,
                      AppleIDAuthorizationScopes.fullName,
                    ],
                  );
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;返回结果credential的结构如下源码：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/// Authorization details from a successful Sign in with Apple flow.
///
/// Most fields are optional in this class.
///
/// Especially [givenName], [familyName], and [email] member will only be provided on the first authorization between
/// the app and Apple ID.
///
/// The [authorizationCode] member is always present and should be used to check the authorizations with Apple servers
/// from your backend. Upon successful validation, you should create a session in your system for the current user,
/// or consider her now logged in.
@immutable
class AuthorizationCredentialAppleID {
  /// Creates an instance which contains the result of a successful Sign in with Apple flow.
  const AuthorizationCredentialAppleID({
    // 略...
  });

  // 略...

  /// An identifier associated with the authenticated user.
  ///
  /// This will always be provided on iOS and macOS systems. On Android, however, this will not be present.
  /// This will stay the same between sign ins, until the user deauthorizes your App.
  final String? userIdentifier;
 
  /// The verification code for the current authorization.
  ///
  /// This code should be used by your server component to validate the authorization with Apple within 5 minutes upon receiving it.
  final String authorizationCode;

  /// A JSON Web Token (JWT) that securely communicates information about the user to your app.
  final String? identityToken;

  // 略...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们主要用到的是这样几个字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;userIdentifier&lt;/code&gt;            —— 苹果用户的唯一标识&lt;/li&gt;
&lt;li&gt;&lt;code&gt;identityToken&lt;/code&gt;             —— jwt加密的idToken,可以在通过接口获取出上面的userIdentifier&lt;/li&gt;
&lt;li&gt;&lt;code&gt;authorizationCode&lt;/code&gt;         —— 配合secret，keyId，teamId，clientId可以获取到jwt加密的idToken&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PS: &lt;strong&gt;userIdentifier&lt;/strong&gt; 是用户唯一标识, 如果没有服务端则可以通过 &lt;strong&gt;userIdentifier&lt;/strong&gt; 直接使用但不推荐。正确安全的方式通过服务端获取，就可以用第二或第三个字段。
服务端代码可参考这里：&lt;a href=&#34;https://github.com/Timothylock/go-signin-with-apple/tree/master&#34;   target=&#34;_blank&#34;&gt;
    go-signin-with-apple&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;div id=&#34;3-xcode配置&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h3 class=&#34;relative group&#34;&gt;3. XCode配置 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#3-xcode%e9%85%8d%e7%bd%ae&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;打开ios目录，在Runner（文件浏览器侧栏）-&amp;gt; Targets-&amp;gt; Runner-&amp;gt;Signing &amp;amp; Capabilities设置 Apple Developer Portal 中创建的“Bundle Identifier”





  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/apple_login/image-1.png&#34;
        alt=&#34;Alt text&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;p&gt;确保应用具有“使用 Apple 登录”功能（Runner（文件浏览器侧边栏）-&amp;gt; Targets-&amp;gt; Runner-&amp;gt; Signing &amp;amp; Capabilities），否则使用 Apple 登录将失败且没有视觉指示（代码仍会收到异常） ）





  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/apple_login/image-2.png&#34;
        alt=&#34;Alt text&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;hr&gt;
&lt;div id=&#34;4-服务端验证&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h3 class=&#34;relative group&#34;&gt;4. 服务端验证 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#4-%e6%9c%8d%e5%8a%a1%e7%ab%af%e9%aa%8c%e8%af%81&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;通过 &lt;strong&gt;authorizationCode&lt;/strong&gt; 获取 &lt;strong&gt;userIdentifier&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import &amp;#34;github.com/Timothylock/go-signin-with-apple/apple&amp;#34;

client := apple.New()

vReq := apple.AppValidationTokenRequest{
	ClientID:     clientID,
	ClientSecret: secret,
	Code:         &amp;#34;authorizationCode&amp;#34;, // 客户端获取的 authorizationCode
}

var resp apple.ValidationResponse

// Do the verification
client.VerifyAppToken(context.Background(), vReq, &amp;amp;resp)

unique, _ := apple.GetUniqueID(resp.IDToken)

// Voila!
fmt.Println(unique)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过 &lt;strong&gt;identityToken&lt;/strong&gt; 获取 &lt;strong&gt;userIdentifier&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;unique, _ := apple.GetUniqueID(params.IDToken)

claim, _ := apple.GetClaims(params.IDToken)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解析后，&lt;code&gt;claim[&amp;quot;sub&amp;quot;]&lt;/code&gt;是userIdentifier, &lt;code&gt;claim[aud]&lt;/code&gt;是BundleID。&lt;/p&gt;
&lt;p&gt;最后，将userIdentifier和token保存到数据库中，以上是苹果登录的配置和流程。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;




  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/img/wc-search.png&#34;
        alt=&#34;&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
