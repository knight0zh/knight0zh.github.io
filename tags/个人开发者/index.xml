<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>个人开发者 on 超级浩码</title>
    <link>https://vastzh.com/tags/%E4%B8%AA%E4%BA%BA%E5%BC%80%E5%8F%91%E8%80%85/</link>
    <description>Recent content in 个人开发者 on 超级浩码</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>© 2024 超级浩码</copyright>
    <lastBuildDate>Fri, 26 Jul 2024 14:38:15 +0800</lastBuildDate><atom:link href="https://vastzh.com/tags/%E4%B8%AA%E4%BA%BA%E5%BC%80%E5%8F%91%E8%80%85/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>记一次App上架遇到的坑</title>
      <link>https://vastzh.com/blog/appprivacy/</link>
      <pubDate>Fri, 26 Jul 2024 14:38:15 +0800</pubDate>
      
      <guid>https://vastzh.com/blog/appprivacy/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;好久没有更新了，实在太忙了，最近在准备新APP的上架，不想刻意的找素材写。花了一周多的时间才终于把国内的几大平台都上架了。为什么花这么久呢？因为在APP上架时，一直被拒，一直被拒，一直悲剧&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;这是在国内上架的第三款APP，之前的两个产品相对来说上架比较顺利。遇到问题相对比较少，无非是业务上的小BUG，隐私合规，权限用途说明等问题相信不少人也遇到过。&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这次上架遇到的问题就比较离奇了，在荣耀和OPPO上还是比较顺利的。我觉得审核就应该这么爽快，绝对不是平台审核太松导致的。而对于华为，小米，vivo等平台，审核非常不顺利。
&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;审核通常分为两部分机审和人工审。机审主要是一些隐私合规方面的审核，如：权限的使用，在隐私政策里是否都体现到了，获取所有收集的个人信息，设备信息，SDK调用是否合规的问题。
&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;而人工审就更全面一些，会涉及权限的使用与隐私合规性，功能的可用性，属于表相上的用户所看到的界面审核。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;回顾本次所遇问题是在机审上。最初机审详情提示我，&lt;strong&gt;在用户点击同意隐私政策之前，不应提前收集IMEI、设备MAC地址和软件安装列表等信息，以及不应提前向用户申请手机、通讯、短信等敏感权限。&lt;/strong&gt;&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在APP里使用了穿山甲，高德地图等SDK。这些SDK会自助收集用户信息如IMEI、设备MAC地址等。当时就按照提示，增加了在通过隐私政策同意后再初始化这些SDK。&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;觉得这个问题还是比较简单的嘛。加完判断应该不回再被拒了，因为之前的两款APP都是这么通过机审的。&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;诧异的是依然还是被拒了，原因依旧，&lt;strong&gt;在用户点击同意隐私政策之前，不应提前收集IMEI、设备MAC地址和软件安装列表等信息，以及不应提前向用户申请手机、通讯、短信等敏感权限。&lt;/strong&gt;&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;仔细检查代码。确实找不到有在隐私政策同意前初始化SDK代码。只能去检查所有依赖的第三方SDK，这个项目所依赖的SDK比较多，&lt;strong&gt;有广告的，定位的，地图，查包信息，传感器等等&lt;/strong&gt;。心想把这些SDK一个个删除进行复检，来排查具体是哪个包导致的问题。&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这个机审估计大约是40分钟出一次结果，导致排查的进度非常慢。这时想到有没有本地部署的隐私检测的服务来检测隐私合规性，这样就可以节省很多时间。&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;github上找到不少本地部署的隐私检测，电脑端的服务搭建后，发现还需要一台root手机通过adb运行&lt;strong&gt;frida-server&lt;/strong&gt;。可能当时觉得太麻烦，手机刷了google框架，要刷root还要重新装google就放弃了。如果有测试机建议&lt;strong&gt;root&lt;/strong&gt;一台以备不时之需。&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;只能一点点的通过平台机审来排查问题。现在回头来看，&lt;strong&gt;root&lt;/strong&gt;本地部署的隐私检测服务来测是更好的选择。&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;机审来回我大概花了6天左右。机审对我来说是个黑盒，本地查不到问题只能通过机审。同时中间被其他的审核问题所耽误，混淆了关键问题。如之前机审没出现，这次测出的新问题，在删SDK排查时已经定位到了具体时哪个包导致的，但是偏偏又报另一个问题，以为不是这个包导致的。也可能是持久战太久我眼花了。&lt;br/&gt;
&lt;br/&gt;





  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/appprivacy/image.png&#34;
        alt=&#34;alt text&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;p&gt;最后用空包再一个个加上这些SDK反复测试，方法比较笨也费时，但是可以准确定位是哪个SDK导致的。&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;同时查看了其他平台的隐私合规被拒绝的日志，发现在vivo中更详细&lt;strong&gt;在用户点击同意隐私政策之前，调用的传感器列表&lt;/strong&gt;。&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;定位到具体SDK，但问题并没有解决。因为确定在同意隐私政策后才初始化SDK。可偏偏报错&lt;strong&gt;在用户点击同意隐私政策之前，调用&amp;hellip;&lt;/strong&gt;。再次复检，引用包但不调任何方法，依然这个错误。&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;同时在pub上找替换方案，或Google到类似的问题却没找到。可能是国内用传感器包的比较少，原生开发用底层包的人更多，另一个原因可能是国外对隐私政策的把控度和国内有区别吧。&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我使用Flutter进行开发，没有学过原生的安卓，对第三方包的&lt;strong&gt;java kotlin&lt;/strong&gt;代码比较陌生。借助GPT阅读代码找到了传感器部分，这部分代码是在&lt;strong&gt;onAttachedToEngine&lt;/strong&gt;方法中调用的。通过搜索发现在Flutter中，&lt;strong&gt;onAttachedToEngine&lt;/strong&gt;方法是在初始化时就被调用。所以即使在main函数中直接弹出隐私窗口，依旧在&lt;strong&gt;Flutter的生命周期&lt;/strong&gt;开始时调用&lt;strong&gt;onAttachedToEngine&lt;/strong&gt;方法。导致SensorManager的代码被调用。&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;找到具体原因后就好办了，虽然没学过kotlin但是有GPT，直接把第三方插件给改了。增加了一个标志&lt;strong&gt;userHasConsented&lt;/strong&gt;。在同意后才初始化传感器，这是GPT表现的又又点蠢，给的代码基本跑不起来一直报错，只能按照思路一点点引导GPT，一点点给GPT纠正逻辑，总算完成了。同时重新测试了SDK的功能是否完好。&lt;/p&gt;
&lt;hr&gt;
&lt;div id=&#34;总结&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h2 class=&#34;relative group&#34;&gt;总结 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%80%bb%e7%bb%93&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;总计耗时7天才把所以平台上架完成，中间还遇到不少问题，但是都解决了。最主要耗时还是一次次的问题排查机审，当定位到具体问题，进过细分还是相对好处理的。&lt;/p&gt;
&lt;p&gt;同时对我来说，遇到了两个黑盒，1. 是隐私检测服务如果本地部署效率可能会大大提升。 2. 原生的安卓一直是我不太想碰的，现在我更多是关注产品上也不是技术本身，但当遇到此类问题。如果预先了解&lt;strong&gt;onAttachedToEngine&lt;/strong&gt;的执行特性，就能更快定位问题。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;




  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/img/wc-search.png&#34;
        alt=&#34;&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>开发日记 —— 记录对接苹果微信登录的坑</title>
      <link>https://vastzh.com/blog/wechat_login/</link>
      <pubDate>Mon, 29 Jan 2024 09:38:15 +0800</pubDate>
      
      <guid>https://vastzh.com/blog/wechat_login/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在对接iOS微信登录时，踩了不少坑，查了很多网上的资料但是对&lt;strong&gt;Universal Links&lt;/strong&gt;和&lt;strong&gt;Associated Domains&lt;/strong&gt;的配置都比较模糊，本文详细介绍怎么配置这些参数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;配置开放平台&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h2 class=&#34;relative group&#34;&gt;配置开放平台 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e9%85%8d%e7%bd%ae%e5%bc%80%e6%94%be%e5%b9%b3%e5%8f%b0&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;如果你的应用需要使接入微信生态相关功能，如&lt;strong&gt;微信登录、微信支付、微信分享&lt;/strong&gt;等，那就需要先在微信开放平台注册账号。&lt;/p&gt;
&lt;p&gt;




  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/wechat_login/image.png&#34;
        alt=&#34;Alt text&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;p&gt;完成做&lt;strong&gt;开发者资质认证&lt;/strong&gt;，认证通过后，就可以进行&lt;strong&gt;应用接入&lt;/strong&gt;。需要注意认证的费用为300元，提交后会有微信交托的三方认证公司给你来电确认信息，所以看到陌生电话不要直接拒接。&lt;/p&gt;
&lt;p&gt;完成上述认证后进入正题开始接入&lt;strong&gt;微信登录&lt;/strong&gt;。在开放平台管理中心&lt;code&gt;创建移动应用&lt;/code&gt;(开发者资质可以创建50个)，填写应用名称、包名等基本信息。点击&lt;code&gt;下一步&lt;/code&gt;





  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/wechat_login/image-1.png&#34;
        alt=&#34;Alt text&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;p&gt;这里需要注意&lt;strong&gt;Universal Links&lt;/strong&gt;的填写。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Universal Links&lt;/strong&gt; 是苹果在 WWDC 上提出的 iOS9 的新特性之一。此特性类似于深层链接，并能够方便地通过打开一个 Https 链接来直接启动您的客户端应用(手机有安装 App)。对比起以往所使用的 URL Scheme,这种新特性在实现 web-app 的无缝链接时能够提供极佳的用户体验。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单说这个链接就是用来打开你应用的入口，在微信中点击这个链接，就会直接跳转到你的应用。
配置成功后可以尝试在手机Safari浏览器直接访问该地址会显示&lt;strong&gt;打开&lt;/strong&gt;按钮。





  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/wechat_login/image-2.png&#34;
        alt=&#34;Alt text&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;hr&gt;
&lt;div id=&#34;配置xcode&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h2 class=&#34;relative group&#34;&gt;配置Xcode 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e9%85%8d%e7%bd%aexcode&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;此外我们还需要在Xcode中配置&lt;strong&gt;Associated Domains&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;点击&lt;code&gt;Sigining &amp;amp; Capabilities&lt;/code&gt; -&amp;gt; &lt;code&gt;Associated Domains&lt;/code&gt; -&amp;gt; &lt;code&gt;+&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;接着在下方&lt;strong&gt;Domais&lt;/strong&gt;中填写&lt;code&gt;applinks:xxx.com&lt;/code&gt;，其中xxx.com是你的域名。





  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/wechat_login/image-4.png&#34;
        alt=&#34;Alt text&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  


这里的域名需要和Universal Links中的域名一致，例如：&lt;/p&gt;
&lt;p&gt;开放平台设置&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Universal Links&lt;/strong&gt;: &lt;code&gt;https://xxx.com/st/universal_link/wechat/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Xcode&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Domais&lt;/strong&gt;: &lt;code&gt;applinks:xxx.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;配置文件下载地址
&lt;code&gt;https://xxx.com/.well-known/apple-app-site-association&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;.well-known 目录是一个由互联网工程任务组（IETF）在RFC 5785中定义的特殊目录，用于存放网站的一些特定的元数据或者配置文件。这个目录通常放在网站的根目录下，使得这些配置文件可以通过一个标准和一致的方式被访问。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;APP会在第一次启动的时候通过填写的域名来下载apple-app-site-association文件。
所以我们还需要在服务器对应地址下放一个apple-app-site-association的json文件，内容如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
  &amp;#34;applinks&amp;#34;: {
    &amp;#34;apps&amp;#34;: [],
    &amp;#34;details&amp;#34;: [
      {
        &amp;#34;appID&amp;#34;: &amp;#34;${your team id}.${your app bundle id}&amp;#34;,
        &amp;#34;paths&amp;#34;: [
          &amp;#34;/universal_link/wechat/*&amp;#34;   //开放平台中的Universal Links Uri对应
        ]
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;div id=&#34;客户端&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h2 class=&#34;relative group&#34;&gt;客户端 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%ae%a2%e6%88%b7%e7%ab%af&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;这里只简单介绍下客户端集成不是本文重点。插件可以使用fluwx 或 wechat_kit。以fluwx为例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    await fluwx
        .authBy(
            which: NormalAuth(
          scope: &amp;#39;snsapi_userinfo&amp;#39;,
          state: &amp;#39;wechat_sdk_demo_test&amp;#39;,
        ))
        .then((value) async {});


    fluwx.addSubscriber((response) async {
      if (response is WeChatAuthResponse) {
        await getWeChatAccessToken(response.code);
        await getUserData();
        Get.back();
      }
    });    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;插件主要是完成&lt;strong&gt;APP-&amp;gt;微信-&amp;gt;APP&lt;/strong&gt;的跳转工作，通过回调拿到code。但不是最终我们需要的openid。接着再通过接口获取openid和access_token。
详细可参考文档：
&lt;code&gt;https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;access_token：通过code换取access_token和openid&lt;/li&gt;
&lt;li&gt;userinfo：获取微信用户基本信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里需要注意，如果你在开放平台配置的&lt;strong&gt;Universal Links&lt;/strong&gt;的不能返回200。或者&lt;strong&gt;Univeral Links&lt;/strong&gt;的域名和&lt;strong&gt;apple-app-site-association&lt;/strong&gt;文件中的域名不一致，都可能导致无法跳转。我们需要让APP重新下载配置文件，可以尝试删除APP并重启手机。&lt;/p&gt;
&lt;hr&gt;
&lt;div id=&#34;总结&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h2 class=&#34;relative group&#34;&gt;总结 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%80%bb%e7%bb%93&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;总的来说，对接微信登录并不复杂，主要麻烦在于开放平台的资质认证和应用认证都分别需要审核时间。另外网上有关&lt;strong&gt;Univeral Links&lt;/strong&gt;的配置资料不少，但都不详细，导致笔记最后还是一步步踩坑才调通。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;




  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/img/wc-search.png&#34;
        alt=&#34;&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>开发日记 —— 快速对接微信支付</title>
      <link>https://vastzh.com/blog/wechat_pay/</link>
      <pubDate>Mon, 29 Jan 2024 09:38:15 +0800</pubDate>
      
      <guid>https://vastzh.com/blog/wechat_pay/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;最近准备开拓国内的安卓市场，由于安卓厂商不同于苹果，每个厂商都有自己的一套钱包体系同时也为被广大用户所熟知，所以对接微信支付就成为了最通用的选择。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对接微信支付的条件比较苛刻，其中最大的坎是需要企业资质，包括现在很多广告商也是。&lt;/p&gt;
&lt;p&gt;我见过有些开发者由于没有企业资质，使用支付宝或微信转账。在客户端做一个兑换码的窗口。用户转账后会获得兑换码，使用兑换码在APP中兑换商品。虽然体验不好但确实也解决了这个问题。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;说下具体需要的条件。进入&lt;strong&gt;微信开放平台&lt;/strong&gt;（https://open.weixin.qq.com/），在账号中心填写企业相关信息并进行认证。另外还需要开通 &lt;strong&gt;微信开发者资质&lt;/strong&gt; 认证，这两个认证都需要时间进行审核，建议提前完成。&lt;/p&gt;
&lt;p&gt;之后我们在管理中心创建一个与你的APP对应的移动应用，这里需要填写应用的官网地址，如果没有开发APP官网的需要开发一个，&lt;strong&gt;Docusaurus&lt;/strong&gt; 是不错的选择。完成创建后同样需要等待审核。&lt;/p&gt;
&lt;p&gt;接下来在移动应用的能力专区中开启微信支付，需要注册一个微信支付的商户号通用需要审核时间，对接微信支付的代码会用到此商户号。





  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/wechat_pay/image.png&#34;
        alt=&#34;Alt text&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;完成上述的准备工作后就可以开始对接微信支付了，先看下微信支付的流程图及接口文档：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;微信支付APP接入官方文档&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pay.weixin.qq.com/static/applyment_guide/applyment_detail_app.shtml&#34;   target=&#34;_blank&#34;&gt;
    https://pay.weixin.qq.com/static/applyment_guide/applyment_detail_app.shtml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pay.weixin.qq.com/wiki/doc/apiv3/open/pay/chapter2_5_0.shtml&#34;   target=&#34;_blank&#34;&gt;
    https://pay.weixin.qq.com/wiki/doc/apiv3/open/pay/chapter2_5_0.shtml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里关键是设置&lt;strong&gt;APIv3密钥&lt;/strong&gt;及&lt;strong&gt;申请API证书&lt;/strong&gt;，有了这些资源就可以进行对接了，我使用的是&lt;strong&gt;Flutter&lt;/strong&gt;，所以这里只介绍Flutter的对接方式。&lt;/p&gt;
&lt;p&gt;我在客户端使用 &lt;strong&gt;fluwx&lt;/strong&gt; 插件，使用此插件可以非常方便的接入微信支付。
服务端我是用golang写的 &lt;strong&gt;go-pay&lt;/strong&gt; 库。&lt;/p&gt;
&lt;p&gt;地址如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/OpenFlutter/fluwx&#34;   target=&#34;_blank&#34;&gt;
    https://github.com/OpenFlutter/fluwx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/go-pay&#34;   target=&#34;_blank&#34;&gt;
    https://github.com/go-pay&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实流程比较简单，但是这两个库的文档没有进行描述，可能因为微信支付是挺常规的功能吧。但是对于新手来说，还是需要花点时间。
流程可以参考下图：





  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/wechat_pay/image-3.png&#34;
        alt=&#34;Alt text&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;p&gt;简单说，就是先通过服务端进行预下单 通过 你的商户配置 以及 &lt;strong&gt;go-pay&lt;/strong&gt; 按照加密规则 生成一些参数返回客户端，然后客户端使用这些参数 调用 &lt;strong&gt;fluwx&lt;/strong&gt; 的方法，可以让APP跳转到微信支付页进行付款。&lt;/p&gt;
&lt;p&gt;之后通过服务端的支付通知接口回调，进行订单支付验证。最后客户端付款成功后，通过接口向服务端获取商品数据。&lt;/p&gt;
&lt;p&gt;APP下单API:
&lt;a href=&#34;https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_2_1.shtml&#34;   target=&#34;_blank&#34;&gt;
    https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_2_1.shtml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;支付通知API:
&lt;a href=&#34;https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_2_5.shtml&#34;   target=&#34;_blank&#34;&gt;
    https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_2_5.shtml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;微信付款和支付接口调用是异步的，所以我们需要做到接口加密，否则受到中间人攻击劫持就损害利益了。&lt;/strong&gt;
我采用对请求参数返回结果进行 AES 加密，这样数据即使被劫持也无法进行修改。&lt;/p&gt;
&lt;div id=&#34;总结&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h2 class=&#34;relative group&#34;&gt;总结 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%80%bb%e7%bb%93&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;本文主要讨论了微信支付的整体流程，有些细节并没有进行描述。比如：下单的时需要传用户标识商品标识，周期性商品如何校验等等。这些同样也比较重要，需要开发者根据具体情况进行开发与配置。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;




  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/img/wc-search.png&#34;
        alt=&#34;&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>开发日记 —— 苹果支付指南</title>
      <link>https://vastzh.com/blog/apple_pay/</link>
      <pubDate>Fri, 26 Jan 2024 10:38:15 +0800</pubDate>
      
      <guid>https://vastzh.com/blog/apple_pay/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;上一篇文章分享了实践 Apple 登录的开发过程。 今天主要分享一下 Apple 支付的实践。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;前言&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h2 class=&#34;relative group&#34;&gt;前言 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%89%8d%e8%a8%80&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;本次实践中，笔者采用了 &lt;strong&gt;订阅 + 一次性付费&lt;/strong&gt; 的模式。用户可根据自己的需求，选择会员订阅周期。从大部分开发者角度来说，订阅模式是比较常见的，因为订阅更有力于APP的长期发展。&lt;/p&gt;
&lt;p&gt;




  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/apple_pay/p1.png&#34;
        alt=&#34;Alt text&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;hr&gt;
&lt;div id=&#34;购买项配置&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h2 class=&#34;relative group&#34;&gt;购买项配置 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e8%b4%ad%e4%b9%b0%e9%a1%b9%e9%85%8d%e7%bd%ae&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;进入 开发者后台配置&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;strong&gt;App 内购买项目&lt;/strong&gt; 中创建 &lt;strong&gt;永久会员&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;strong&gt;订阅&lt;/strong&gt; 创建订阅组，后分别 &lt;strong&gt;月度会员&lt;/strong&gt; &lt;strong&gt;年度会员&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;




  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/apple_pay/p2.png&#34;
        alt=&#34;Alt text&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;p&gt;需要注意两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建的购买项需要设置多语言，否则会出现报错 &lt;strong&gt;缺少元数据&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;审核信息的截图有设备&lt;strong&gt;尺寸限制&lt;/strong&gt;，可参考官方文档：&lt;code&gt;https://developer.apple.com/help/app-store-connect/reference/screenshot-specifications&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div id=&#34;客户端&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h2 class=&#34;relative group&#34;&gt;客户端 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%ae%a2%e6%88%b7%e7%ab%af&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;我使用 &lt;strong&gt;in_app_purchase&lt;/strong&gt; 插件，在客户端进行支付。可以运行插件的example进行测试。成功运行效果如下：





  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/apple_pay/p3.gif&#34;
        alt=&#34;Alt text&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;p&gt;具体细节可以参考插件文档，需要注意的是，我们需要如何进行iOS订单的验证。
通过插件的demo我们看到默认返回true，所以这部分逻辑需要开发者自己实现。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  Future&amp;lt;bool&amp;gt; _verifyPurchase(PurchaseDetails purchaseDetails) async {
    // IMPORTANT!! Always verify a purchase before delivering the product.
    // For the purpose of an example, we directly return true.
    
    return Future&amp;lt;bool&amp;gt;.value(true);
  }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过方法返回的类型可以得到：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class PurchaseVerificationData {
  /// ...

  /// The data used for local verification.
  ///
  /// The data is formatted according to the specifications of the respective
  /// store. You can use the [source] field to determine the store from which
  /// the data originated and proces the data accordingly.
  final String localVerificationData;

  /// The data used for server verification.
  final String serverVerificationData;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们看到 &lt;strong&gt;localVerificationData&lt;/strong&gt; 用于本地验证，&lt;strong&gt;serverVerificationData&lt;/strong&gt; 用于服务器验证。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
    final verificationData =
        purchaseDetails.verificationData.serverVerificationData;

    final Dio dio = Dio();
    dio.options.headers[&amp;#39;Accept&amp;#39;] = &amp;#39;application/json&amp;#39;;
    dio.options.headers[&amp;#39;Content-Type&amp;#39;] = &amp;#39;application/json&amp;#39;;
    var response = await dio.post(&amp;#39;https://buy.itunes.apple.com/verifyReceipt&amp;#39;,
        data: {
          &amp;#39;password&amp;#39;: password,
          &amp;#39;receipt-data&amp;#39;: verificationData
        });
    var _response = json.decode(response.toString());
    if (_response[&amp;#34;status&amp;#34;] == 21007) {
      var response = await dio
          .post(&amp;#39;https://sandbox.itunes.apple.com/verifyReceipt&amp;#39;, data: {
        &amp;#39;password&amp;#39;: password,
        &amp;#39;receipt-data&amp;#39;: verificationData
      });
    }
    if (_response[&amp;#34;status&amp;#34;] == 0) {
      return Future&amp;lt;bool&amp;gt;.value(true);
    } else {
      return Future&amp;lt;bool&amp;gt;.value(false);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;以前苹果提供了一个验证接口，可以跳过服务端进行验证，可惜在去年5月份被标记 &lt;code&gt;Deprecated(已弃用)&lt;/code&gt;，虽然目前看来还是可以使用，但是保不齐哪天就被苹果给删掉了。&lt;/strong&gt;





  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/apple_pay/p4.png&#34;
        alt=&#34;Alt text&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;p&gt;通过文档我们得知：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该接口已弃用。要验证服务器上的收据，请按照在服务器上的设备上验证收据中的步骤操作。要在不使用收据的情况下验证服务器上的应用内购买，请调用App Store Server API为您的客户获取 Apple 签名的交易和订阅信息，或验证您的应用获取的签名数据。您还可以从App Store Server Notifications V2端点获取相同的签名交易和订阅信息 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以需要改用 &lt;strong&gt;App Store Server API&lt;/strong&gt; 进行验证。&lt;/p&gt;
&lt;div id=&#34;获取交易信息&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h3 class=&#34;relative group&#34;&gt;获取交易信息 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e8%8e%b7%e5%8f%96%e4%ba%a4%e6%98%93%e4%bf%a1%e6%81%af&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;https://developer.apple.com/documentation/appstoreserverapi/get_transaction_info&lt;/code&gt;
根据文档的描述，我们得知此接口我们可以获取 &lt;strong&gt;包含签名的单个交易信息的结果&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;接着，通过苹果开发后台进行配置下载 &lt;strong&gt;私钥匙文件 + KeyID + BundleID + Issuer&lt;/strong&gt; 进行验签比对订单号等数据判断交易是否成功。&lt;/p&gt;
&lt;div id=&#34;获取历史交易信息&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h3 class=&#34;relative group&#34;&gt;获取历史交易信息 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e8%8e%b7%e5%8f%96%e5%8e%86%e5%8f%b2%e4%ba%a4%e6%98%93%e4%bf%a1%e6%81%af&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;https://developer.apple.com/documentation/appstoreserverapi/get_transaction_history&lt;/code&gt;
根据此接口我们可以获取&lt;strong&gt;包含签名的多个交易信息的结果&lt;/strong&gt;，同样验签后获取详细数据。&lt;/p&gt;
&lt;p&gt;我们可以通过此接口进行订阅到期续费情况等数据进行判断。&lt;/p&gt;
&lt;hr&gt;
&lt;div id=&#34;验签及api配置&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h2 class=&#34;relative group&#34;&gt;验签及API配置 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e9%aa%8c%e7%ad%be%e5%8f%8aapi%e9%85%8d%e7%bd%ae&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;在此页面我们可以获取验签需要的数据 &lt;strong&gt;私钥匙文件、 KeyID + BundleID + Issuer&lt;/strong&gt;





  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/apple_pay/p5.png&#34;
        alt=&#34;Alt text&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;p&gt;创建沙盒账号后可进行购买订阅的测试，不会收取费用。





  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/apple_pay/p6.png&#34;
        alt=&#34;Alt text&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;hr&gt;
&lt;div id=&#34;内购被拒&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h2 class=&#34;relative group&#34;&gt;内购被拒 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%86%85%e8%b4%ad%e8%a2%ab%e6%8b%92&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;另外，在完成所有工作发布可能会被拒，因为我之前没有订阅经验，所以遇到了一些问题。





  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/apple_pay/p7.png&#34;
        alt=&#34;Alt text&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;p&gt;如果做了订阅我建议你完成以下步骤，如果这些步骤都做到了，那么大概率是不会被拒的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在付费页面提供隐私政策及使用条款的入口。&lt;/li&gt;
&lt;li&gt;在使用条款中明确说明和介绍你的订阅服务，包含的服务内容、订阅周期、退订、取消订阅等信息。&lt;/li&gt;
&lt;li&gt;在APP详情页中，提供订阅服务的详细说明。&lt;/li&gt;
&lt;li&gt;提供恢复购买的功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果还是不知道如何做，可以参考一些其他的APP，一般在他们的App详情页和使用条款中都有订阅相关的说明。&lt;/p&gt;
&lt;hr&gt;
&lt;div id=&#34;总结&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h2 class=&#34;relative group&#34;&gt;总结 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%80%bb%e7%bb%93&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;理论上来说，&lt;strong&gt;获取交易信息&lt;/strong&gt; &lt;strong&gt;获取历史交易信息&lt;/strong&gt; 这两个接口的数据都可以放在客户端本地调用，只是验证这一步放在服务端去做比较符合逻辑。&lt;/p&gt;
&lt;p&gt;无论是全部交易接口在服务端还是验签在服务端，都可能被&lt;strong&gt;劫持&lt;/strong&gt;，即在返回客户端前，对数据进行加工处理，比如修改交易状态来欺瞒客户端。&lt;/p&gt;
&lt;p&gt;所以，最好是对接口数据进行加密。我采用对请求参数返回结构进行 &lt;strong&gt;AES&lt;/strong&gt; 加密，及时数据被劫持也无法进行修改。&lt;/p&gt;
&lt;p&gt;如果没有服务端，极端的方式是把验签放在客户端进行能跑通，因安全性问题不推荐这么做。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;




  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/img/wc-search.png&#34;
        alt=&#34;&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>开发日记 —— 记录对接苹果登录的坑</title>
      <link>https://vastzh.com/blog/apple_login/</link>
      <pubDate>Thu, 25 Jan 2024 15:38:15 +0800</pubDate>
      
      <guid>https://vastzh.com/blog/apple_login/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;最近在开发新项目时用到了 苹果登录、微信登录和订阅支付，由于是第一次对接以上内容，踩了不少坑，记录一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;本文主要介绍苹果登录，我也会在之后的文章中介绍微信登录和订阅支付。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;前言&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h2 class=&#34;relative group&#34;&gt;前言 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%89%8d%e8%a8%80&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;之前我的APP中大多数是买断式的，用户可以使用一些基本的功能，如果需要高级功能，则需要付费买断。&lt;/p&gt;
&lt;p&gt;这次介于新的项目的特点，我决定在买断的基础之外加上订阅支付，对我来说算是一种新的尝试吧。有了订阅同时也就意味着需要构建一个用户体系来管理订阅。&lt;/p&gt;
&lt;p&gt;对于订阅支付来说&lt;strong&gt;用户体系&lt;/strong&gt;更符合逻辑。但在调研过程中也发现有些APP没有做登录(用户体系)也依然有订阅支付，其主要还是依靠大部分IAP组件提供的&lt;strong&gt;恢复购买&lt;/strong&gt;功能+&lt;strong&gt;本地验证&lt;/strong&gt;接口实现的。但是这里面还是有一些坑，在下文会介绍。&lt;/p&gt;
&lt;hr&gt;
&lt;div id=&#34;正文&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h2 class=&#34;relative group&#34;&gt;正文 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%ad%a3%e6%96%87&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;先看下完整的苹果登录流程：





  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/apple_login/image-3.png&#34;
        alt=&#34;Alt text&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;hr&gt;
&lt;div id=&#34;1-苹果开发者后台配置&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h3 class=&#34;relative group&#34;&gt;1. 苹果开发者后台配置 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#1-%e8%8b%b9%e6%9e%9c%e5%bc%80%e5%8f%91%e8%80%85%e5%90%8e%e5%8f%b0%e9%85%8d%e7%bd%ae&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;服务端需要的参数,可在苹果开发者后台设置。 设置App ID, 在 &lt;strong&gt;Capabilities&lt;/strong&gt; 中设置 &lt;strong&gt;Sign In with Apple&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;




  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/apple_login/a1.png&#34;
        alt=&#34;&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  







  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/apple_login/a2.png&#34;
        alt=&#34;&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;p&gt;创建一个用来在服务端与Apple服务器交互的Key，并下载密钥文件。





  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/apple_login/a3.png&#34;
        alt=&#34;&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  







  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/apple_login/a4.png&#34;
        alt=&#34;&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;hr&gt;
&lt;div id=&#34;2-客户端配置&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h3 class=&#34;relative group&#34;&gt;2. 客户端配置 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#2-%e5%ae%a2%e6%88%b7%e7%ab%af%e9%85%8d%e7%bd%ae&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;选择主流的Apple登录插件&lt;a href=&#34;https://pub.dev/packages/sign_in_with_apple&#34;   target=&#34;_blank&#34;&gt;
    Sign_in_with_apple&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;




  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/apple_login/image.png&#34;
        alt=&#34;&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dependencies:
  flutter:
    sdk: flutter
  sign_in_with_apple: ^latest_version
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在登录按钮里调用方法：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;final credential = await SignInWithApple.getAppleIDCredential(
                    scopes: [
                      AppleIDAuthorizationScopes.email,
                      AppleIDAuthorizationScopes.fullName,
                    ],
                  );
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;返回结果credential的结构如下源码：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/// Authorization details from a successful Sign in with Apple flow.
///
/// Most fields are optional in this class.
///
/// Especially [givenName], [familyName], and [email] member will only be provided on the first authorization between
/// the app and Apple ID.
///
/// The [authorizationCode] member is always present and should be used to check the authorizations with Apple servers
/// from your backend. Upon successful validation, you should create a session in your system for the current user,
/// or consider her now logged in.
@immutable
class AuthorizationCredentialAppleID {
  /// Creates an instance which contains the result of a successful Sign in with Apple flow.
  const AuthorizationCredentialAppleID({
    // 略...
  });

  // 略...

  /// An identifier associated with the authenticated user.
  ///
  /// This will always be provided on iOS and macOS systems. On Android, however, this will not be present.
  /// This will stay the same between sign ins, until the user deauthorizes your App.
  final String? userIdentifier;
 
  /// The verification code for the current authorization.
  ///
  /// This code should be used by your server component to validate the authorization with Apple within 5 minutes upon receiving it.
  final String authorizationCode;

  /// A JSON Web Token (JWT) that securely communicates information about the user to your app.
  final String? identityToken;

  // 略...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们主要用到的是这样几个字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;userIdentifier&lt;/code&gt;            —— 苹果用户的唯一标识&lt;/li&gt;
&lt;li&gt;&lt;code&gt;identityToken&lt;/code&gt;             —— jwt加密的idToken,可以在通过接口获取出上面的userIdentifier&lt;/li&gt;
&lt;li&gt;&lt;code&gt;authorizationCode&lt;/code&gt;         —— 配合secret，keyId，teamId，clientId可以获取到jwt加密的idToken&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PS: &lt;strong&gt;userIdentifier&lt;/strong&gt; 是用户唯一标识, 如果没有服务端则可以通过 &lt;strong&gt;userIdentifier&lt;/strong&gt; 直接使用但不推荐。正确安全的方式通过服务端获取，就可以用第二或第三个字段。
服务端代码可参考这里：&lt;a href=&#34;https://github.com/Timothylock/go-signin-with-apple/tree/master&#34;   target=&#34;_blank&#34;&gt;
    go-signin-with-apple&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;div id=&#34;3-xcode配置&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h3 class=&#34;relative group&#34;&gt;3. XCode配置 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#3-xcode%e9%85%8d%e7%bd%ae&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;打开ios目录，在Runner（文件浏览器侧栏）-&amp;gt; Targets-&amp;gt; Runner-&amp;gt;Signing &amp;amp; Capabilities设置 Apple Developer Portal 中创建的“Bundle Identifier”





  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/apple_login/image-1.png&#34;
        alt=&#34;Alt text&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;p&gt;确保应用具有“使用 Apple 登录”功能（Runner（文件浏览器侧边栏）-&amp;gt; Targets-&amp;gt; Runner-&amp;gt; Signing &amp;amp; Capabilities），否则使用 Apple 登录将失败且没有视觉指示（代码仍会收到异常） ）





  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/apple_login/image-2.png&#34;
        alt=&#34;Alt text&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;hr&gt;
&lt;div id=&#34;4-服务端验证&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h3 class=&#34;relative group&#34;&gt;4. 服务端验证 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#4-%e6%9c%8d%e5%8a%a1%e7%ab%af%e9%aa%8c%e8%af%81&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;通过 &lt;strong&gt;authorizationCode&lt;/strong&gt; 获取 &lt;strong&gt;userIdentifier&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import &amp;#34;github.com/Timothylock/go-signin-with-apple/apple&amp;#34;

client := apple.New()

vReq := apple.AppValidationTokenRequest{
	ClientID:     clientID,
	ClientSecret: secret,
	Code:         &amp;#34;authorizationCode&amp;#34;, // 客户端获取的 authorizationCode
}

var resp apple.ValidationResponse

// Do the verification
client.VerifyAppToken(context.Background(), vReq, &amp;amp;resp)

unique, _ := apple.GetUniqueID(resp.IDToken)

// Voila!
fmt.Println(unique)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过 &lt;strong&gt;identityToken&lt;/strong&gt; 获取 &lt;strong&gt;userIdentifier&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;unique, _ := apple.GetUniqueID(params.IDToken)

claim, _ := apple.GetClaims(params.IDToken)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解析后，&lt;code&gt;claim[&amp;quot;sub&amp;quot;]&lt;/code&gt;是userIdentifier, &lt;code&gt;claim[aud]&lt;/code&gt;是BundleID。&lt;/p&gt;
&lt;p&gt;最后，将userIdentifier和token保存到数据库中，以上是苹果登录的配置和流程。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;




  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/img/wc-search.png&#34;
        alt=&#34;&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>别再找代理，申请计算机软件著作登记(软著)了</title>
      <link>https://vastzh.com/blog/ccopyright/</link>
      <pubDate>Tue, 02 Jan 2024 15:38:15 +0800</pubDate>
      
      <guid>https://vastzh.com/blog/ccopyright/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;如果你想做自己的产品，软件著作权是必不可少的，尤其是在国内。比如，你做了一个软件，想让用户使用你的软件，就需要发布到软件市场，软著是必备的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;前言&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h2 class=&#34;relative group&#34;&gt;前言 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%89%8d%e8%a8%80&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;个人开发者的道路是坎坷的，特别是在国内，先不说研发一款产品本身的门槛。假设我们已经完成了这一步骤，依然是无法让用户使用的你软件的。因为还没有把应用发布到应用市场。而发布应用市场就需要软著，备案等等。&lt;/p&gt;
&lt;p&gt;尤其是软著，申请流程非常繁琐，需要很多资料。所以很多开发者为了能更专心开发产品，选择让第三方代理申请软著。我也一样，曾经找了两波代理申请，但是都失败了。浪费了大量的时间。因为申请软著一般需要等待2～3个月时间，无论成功失败。&lt;/p&gt;
&lt;p&gt;




  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/ccopyright/c1.png&#34;
        alt=&#34;Alt text&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;p&gt;我为此花了半年时间，损失惨重。第一次申请了多个软著均都失败，耗时3个月。后来在个人开发群找了群友推荐的代理重新申请均失败。花了半年时间，气得差点一口老血喷出。&lt;/p&gt;
&lt;p&gt;最后我选择自己亲手办理。没想到花了2个多月时间，申请了四个软著，均成功。&lt;/p&gt;
&lt;div id=&#34;c6png&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h2 class=&#34;relative group&#34;&gt;




  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/ccopyright/c6.png&#34;
        alt=&#34;&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#c6png&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h2&gt;
&lt;div id=&#34;为什么要自己申请&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h2 class=&#34;relative group&#34;&gt;为什么要自己申请？ 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e8%87%aa%e5%b7%b1%e7%94%b3%e8%af%b7&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;有人可能会说，我看到某宝上申请代理的评价基本都能拿到，评价都很好为什么浪费时间自己申请呢？因为你压根看不到那些申请没通过的。就拿我来说，申请软著没通过后，代理商会给我两个选择：1. 再提交一次。这意味着再等待3个月。2. 退款。退还代购订单一半的金额。没错，花了一半的金额，还浪费了时间。我选择的是退款及时止损再自己申请，需要先关闭订单，代理商才会再退款给我。由于订单已经退回失效了，也就无法进行评论了。&lt;/p&gt;
&lt;div id=&#34;申请流程&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h2 class=&#34;relative group&#34;&gt;申请流程 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e7%94%b3%e8%af%b7%e6%b5%81%e7%a8%8b&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h2&gt;
&lt;div id=&#34;1官网填表&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h3 class=&#34;relative group&#34;&gt;1.官网填表 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#1%e5%ae%98%e7%bd%91%e5%a1%ab%e8%a1%a8&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;进入&lt;a href=&#34;https://register.ccopyright.com.cn/registration.html#/registerSoft&#34;   target=&#34;_blank&#34;&gt;
    软著申请官网&lt;/a&gt;，选择 &lt;strong&gt;R11 计算机软件著作权登记申请&lt;/strong&gt;.





  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/ccopyright/c2.png&#34;
        alt=&#34;&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/li&gt;
&lt;li&gt;选择 &lt;strong&gt;我是申请人&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;填写开发的基本信息，包括开发的硬件环境，操作系统，开发语言等等。&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;2程序鉴别材料&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h3 class=&#34;relative group&#34;&gt;2.程序鉴别材料 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#2%e7%a8%8b%e5%ba%8f%e9%89%b4%e5%88%ab%e6%9d%90%e6%96%99&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;这部分需要我们提交登记软件源程序连续的前30页和连续的后30页的软件源码。&lt;/p&gt;
&lt;p&gt;这里推荐一个开源程序，我就是用这个程序来提取源码的。非常感谢作者🙏。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;举个例子&lt;/strong&gt;&lt;br/&gt;
以django-guardian项目为例来说明pyerz的用法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;克隆代码&lt;/strong&gt;&lt;br/&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git clone git@github.com:django-guardian/django-guardian.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;生成文档&lt;/strong&gt;&lt;br/&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pyerz -i django-guardian -o django-guardian.docx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由于官网要求我们需要转pdf，我们直接通过本地&lt;strong&gt;打印&lt;/strong&gt;转换pdf格式。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/soultoolman/pyerz&#34;   target=&#34;_blank&#34;&gt;
    https://github.com/soultoolman/pyerz&lt;/a&gt;
主页有详细的文档，这里不再赘述。&lt;/p&gt;
&lt;div id=&#34;3文档鉴别材料&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h3 class=&#34;relative group&#34;&gt;3.文档鉴别材料 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#3%e6%96%87%e6%a1%a3%e9%89%b4%e5%88%ab%e6%9d%90%e6%96%99&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;这部分其实就是产品的文档说明书。
可以在网上找到一些模版，根据模版套用自己的产品就可以了。&lt;/p&gt;
&lt;div id=&#34;4确认提交&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h3 class=&#34;relative group&#34;&gt;4.确认提交 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#4%e7%a1%ae%e8%ae%a4%e6%8f%90%e4%ba%a4&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;完成以上步骤后进行提交。&lt;/strong&gt;





  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/ccopyright/c3.png&#34;
        alt=&#34;&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;div id=&#34;5提交材料&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h3 class=&#34;relative group&#34;&gt;5.提交材料 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#5%e6%8f%90%e4%ba%a4%e6%9d%90%e6%96%99&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;完成了初步的提交后，下载签章页，盖章后提交即可。





  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/ccopyright/c4.png&#34;
        alt=&#34;&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;p&gt;如果没有打印扫描设备，可以找打印店去打印材料后进行盖章，扫描成文件再上传。





  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/blog/ccopyright/c5.png&#34;
        alt=&#34;&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;div id=&#34;结语&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
&lt;h2 class=&#34;relative group&#34;&gt;结语 
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e7%bb%93%e8%af%ad&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;&lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;其实自己申请反而比走代理的材料要少（少了代办的盖章材料大概五六张），而且成功率更高。
很多事，我觉得可以自己多探索一下也许会有意想不到的收获。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;




  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        src=&#34;https://vastzh.com/img/wc-search.png&#34;
        alt=&#34;&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
